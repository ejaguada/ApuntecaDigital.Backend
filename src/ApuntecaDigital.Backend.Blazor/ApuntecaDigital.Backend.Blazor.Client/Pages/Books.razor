@page "/books"
@rendermode InteractiveAuto
@using ApuntecaDigital.Backend.Blazor.Client.Models
@using ApuntecaDigital.Backend.Blazor.Client.Services
@inject CareerService CareerService
@inject ClassService ClassService
@inject SubjectService SubjectService
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject BookService BookService
@using Radzen
@using Radzen.Blazor

<PageTitle>Classes</PageTitle>

@* CSS styles for the spinner and RadzenDataGrid *@
<style>
    .ui-spinner-button {
        display: none;
    }
</style>


@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenDataGrid @ref="grid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5"
                    Data="@books" AllowSorting="true" TItem="Book"
                    LogicalFilterOperator="LogicalFilterOperator.Or" ColumnWidth="200px"
                    SelectionMode="DataGridSelectionMode.Single">
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Book" Click="@InsertRow"
                          Disabled="@(editMode == DataGridEditMode.Single && booksToInsert.Count() > 0)"/>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="Id" Title="Book ID" Width="120px" Frozen="true"/>
            <RadzenDataGridColumn Property="@nameof(Book.Title)" Title="Book Title"/>
            <RadzenDataGridColumn Title="Career">
                <Template Context="bookObj">
                    @bookObj?.Subject?.Class?.Career?.Name
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Class">
                <Template Context="bookObj">
                    @bookObj?.Subject?.Class?.Name
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Subject">
                <Template Context="bookObj">
                    @bookObj?.Subject?.Name
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="bookObj" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
                                  Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="bookObj">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                  Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                  Click="@(async args => { await EditRow(bookObj); })"
                                  @onclick:stopPropagation="true"/>
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat"
                                  Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1"
                                  Click="@(args => ShowDeleteDialog(bookObj))" @onclick:stopPropagation="true"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    RadzenDataGrid<Book>? grid = new RadzenDataGrid<Book>();
    private List<Book> books = new();
    private bool isLoading = false;
    private string name = string.Empty;
    private System.Threading.Timer? debounceTimer;
    DataGridEditMode editMode = DataGridEditMode.Single;

    List<Book> booksToInsert = new List<Book>();

    // private string typeOfOperation = "Create";
    private List<Career> careers = new();
    private List<Class> classes = new();
    private List<Subject> subjects = new();
    private bool loadFirstTime = true;
    private List<Career> careersAux = new();
    private List<Class> classesAux = new();
    private List<Subject> subjectsAux = new();

    protected override async Task OnInitializedAsync()
    {
        if (loadFirstTime)
        {
            loadFirstTime = false;
            await LoadInitialData();
        }
    }

    private async Task LoadInitialData()
    {
        await LoadBooks();
    }

    private async Task LoadCareers()
    {
        try
        {
            careers = await CareerService.GetCareersAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load careers: {ex.Message}",
                Duration = 4000
            });
        }
    }

    private async Task LoadSubjects()
    {
        try
        {
            subjects = await SubjectService.GetSubjectsAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load subjects: {ex.Message}",
                Duration = 4000
            });
        }
    }

    private async Task LoadClasses()
    {
        try
        {
            classes = await ClassService.GetClassesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load classes: {ex.Message}",
                Duration = 4000
            });
        }
    }

    //populate careersaux, classesAux and subjectsAux
    private async Task PopulateAuxiliaryLists()
    {
        careersAux = await CareerService.GetCareersAsync();
        classesAux = await ClassService.GetClassesAsync();
        subjectsAux = await SubjectService.GetSubjectsAsync();
    }

    private async Task LoadBooks()
    {
        isLoading = true;
        try
        {
            var apiBooks = await BookService.GetBooksAsync(name);

            books = apiBooks.Select(book => new Book
            {
                Id = book.Id,
                Title = book.Title,
                Author = book.Author,
                Isbn = book.Isbn,
                Subject = book.Subject
            }).ToList();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load books: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchBooks()
    {
        await LoadBooks();
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        name = e.Value?.ToString() ?? string.Empty;

        // Debounce the search to avoid excessive calls
        debounceTimer?.Dispose();
        debounceTimer = new System.Threading.Timer(async _ => { await InvokeAsync(SearchBooks); }, null, 500, Timeout.Infinite);
    }

    void Reset()
    {
        booksToInsert.Clear();
    }

    void Reset(Book bookObj)
    {
        booksToInsert.Remove(bookObj);
    }

    async Task InsertRow()
    {
        await DialogService.OpenAsync<EditBook>($"Create Book",
            new Dictionary<string, object>() { { "BookId", -1 } },
            new DialogOptions()
            {
                Resizable = true,
                Draggable = true
            });
        await LoadBooks();
        if (grid != null) await grid.Reload();
    }

    async Task EditRow(Book bookObj)
    {
        if (grid == null || !grid.IsValid) return;

        await DialogService.OpenAsync<EditBook>($"Book {bookObj.Id}",
            new Dictionary<string, object>() { { "BookId", bookObj.Id } },
            new DialogOptions()
            {
                Resizable = true,
                Draggable = true
            });
        await LoadBooks();
        await grid.Reload();
    }

    async Task SaveRow(Book bookObj)
    {
        if (grid != null) await grid.UpdateRow(bookObj);
    }

    void CancelEdit(Book bookObj)
    {
        Reset(bookObj);

        grid?.CancelEditRow(bookObj);
    }

    async Task RemoveBook(Book book)
    {
        if (book != null)
        {
            await BookService.DeleteBookAsync(book.Id);
            await LoadBooks();
            if (grid != null) await grid.Reload();
            StateHasChanged();
        }
    }

    // private async Task OnKeyPress(KeyboardEventArgs e, Book bookObj)
    // {
    // 	if (e.Key == "Enter" && typeOfOperation == "Create")
    // 	{
    // 		if (grid != null) await SaveRow(bookObj);
    // 		bookObj = new Book();
    // 		await OnCreateRow(bookObj);
    // 	}
    // 	else if (e.Key == "Enter" && typeOfOperation == "Update")
    // 	{
    // 		if (grid != null) await SaveRow(bookObj);
    // 		await OnUpdateRow(bookObj);
    // 		bookObj = new Book();

    // 		typeOfOperation = "Create";
    // 	}
    // }

    private void OnInputChange(ChangeEventArgs e, Book bookObj)
    {
        if (bookObj != null)
        {
            bookObj.Title = e.Value?.ToString() ?? string.Empty;
        }
    }

    async Task OnCareerChange(int careerId, Book bookObj)
    {
        subjects = new List<Subject>();
        classes = new List<Class>();
        bookObj.Subject.Id = 0;
        bookObj.Subject.Class.Id = 0;
        classes = await ClassService.GetClassesByCareerIdAsync(careerId);
        StateHasChanged();
    }

    async Task OnClassChange(int classId, Book bookObj)
    {
        subjects = new List<Subject>();
        bookObj.Subject.Id = 0;
        subjects = await SubjectService.GetSubjectsByClassIdAsync(classId);
        StateHasChanged();
    }

    async Task ShowDeleteDialog(Book book)
    {
        var result = await DialogService.OpenAsync("Simple Dialog", ds =>
            @<RadzenStack Gap="1.5rem">
                <p>Confirm DELETE Book ID <b>@book.Id</b>?</p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center"
                             JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Ok" Click="async () => {ds.Close(true); await RemoveBook(book); }"
                                      Style="width: 80px;"/>
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);
    }

}