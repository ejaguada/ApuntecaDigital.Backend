@page "/classes"
@rendermode InteractiveAuto
@using ApuntecaDigital.Backend.Blazor.Client.Models
@using ApuntecaDigital.Backend.Blazor.Client.Services
@inject CareerService CareerService
@inject ClassService ClassService
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@using Radzen
@using Radzen.Blazor

<PageTitle>Classes Search</PageTitle>

@* CSS styles for the spinner and RadzenDataGrid *@
<style>
    .ui-spinner-button {
        display: none;
    }
</style>


@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenDataGrid @ref="grid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5"
        Data="@classes" AllowSorting="true" EditMode="@editMode" TItem="Class" RowUpdate="@OnUpdateRow"
        RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Class" Click="@InsertRow"
                Disabled="@(editMode == DataGridEditMode.Single && classesToInsert.Count() > 0)" />
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="Id" Title="Class ID" Width="120px" Frozen="true" />
            <RadzenDataGridColumn Property="@nameof(Class.Name)" Title="Class Name">
                <EditTemplate Context="classObj">
                    <RadzenTextBox @onkeyup="@(args => OnKeyPress(args, classObj))"
                        @oninput="@(args => OnInputChange(args, classObj))" @bind-Value="classObj.Name"
                        Style="width:200px; display: block" Name="ClassName" aria-label="Enter class name" />
                    <RadzenRequiredValidator Text="ClassName is required" Component="ClassName" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Class.Year)" Title="Class Year">
                <EditTemplate Context="classObj">
                    <RadzenNumeric @onkeyup="@(args => OnKeyPress(args, classObj))"
                        @oninput="@(args => OnInputChangeYear(args, classObj))" @bind-Value="@classObj.Year"
                        Style="width:200px; display: block" Name="ClassYear" aria-label="Enter class year" MaxLength="4" />
                    <RadzenRequiredValidator Text="ClassYear is required" Component="ClassYear" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Class.CareerId)" Title="Career">
                <EditTemplate Context="classObj">
                    <RadzenDropDown TValue="int" Data="@careers" TextProperty="Name" ValueProperty="Id"
                        @bind-Value="classObj.CareerId" Style="width:200px;" Name="CareerDropdown"
                        Placeholder="Select a career" />
                    <RadzenRequiredValidator Text="Career is required" Component="CareerDropdown" Popup="true" />
                </EditTemplate>
                <Template Context="classObj">
                    @careers.FirstOrDefault(c => c.Id == classObj.CareerId)?.Name
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="classObj" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
                Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="classObj">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                        Click="@(async args => { await EditRow(classObj); typeOfOperation = "Update"; })"
                        @onclick:stopPropagation="true" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1"
                        Click="@(args => DeleteRow(classObj))" @onclick:stopPropagation="true" />
                </Template>
                <EditTemplate Context="classObj">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Click="@((args) => SaveRow(classObj))" aria-label="Save" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(classObj))"
                        aria-label="Cancel" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1"
                        Click="@(args => DeleteRow(classObj))" aria-label="Delete" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    RadzenDataGrid<Class>? grid = new RadzenDataGrid<Class>();
    private List<Class> classes = new();
    private bool isLoading = false;
    private string name = string.Empty;
    private System.Threading.Timer? debounceTimer;
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<Class> classesToInsert = new List<Class>();
    private string typeOfOperation = "Create";
    private List<Career> careers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCareers();
        await LoadClasses();
    }
    private async Task LoadCareers()
    {
        try
        {
            careers = await CareerService.GetCareersAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load careers: {ex.Message}",
                Duration = 4000
            });
        }
    }
    private async Task LoadClasses()
    {
        isLoading = true;
        try
        {
            classes = await ClassService.GetClassesAsync(name);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load classes: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchClasses()
    {
        await LoadClasses();
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        name = e.Value?.ToString() ?? string.Empty;

        // Debounce the search to avoid excessive calls
        debounceTimer?.Dispose();
        debounceTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(SearchClasses);
        }, null, 500, Timeout.Infinite);
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchClasses();
        }
    }

    async Task OnUpdateRow(Class classObj)
    {
        if (classObj != null)
        {
            await ClassService.UpdateClassAsync(classObj);
        }
    }

    async Task OnCreateRow(Class classObj)
    {
        if (classObj != null)
        {
            await ClassService.CreateClassAsync(classObj);
            classesToInsert.Remove(classObj);
            if (grid != null) await grid.Reload();
        }
    }

    void Reset()
    {
        classesToInsert.Clear();
    }

    void Reset(Class classObj)
    {
        classesToInsert.Remove(classObj);
    }

    async Task InsertRow()
    {
        if (grid == null || !grid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var classObj = new Class();
        classesToInsert.Add(classObj);
        await grid.InsertRow(classObj);
    }

    async Task InsertAfterRow(Class classObj)
    {
        if (grid == null || !grid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var newClass = new Class();
        classesToInsert.Add(newClass);
        await grid.InsertRow(newClass);
    }

    async Task EditRow(Class classObj)
    {
        if (grid == null || !grid.IsValid) return;

        await grid.EditRow(classObj);
    }

    async Task SaveRow(Class classObj)
    {
        if (grid == null || !grid.IsValid) return;

        if (typeOfOperation == "Create")
        {
            await OnCreateRow(classObj);
            await LoadClasses();
            StateHasChanged();
        }
        else if (typeOfOperation == "Update")
        {
            await OnUpdateRow(classObj);
            await LoadClasses();
            typeOfOperation = "Create";
            StateHasChanged();
        }
    }

    void CancelEdit(Class classObj)
    {
        Reset(classObj);

        grid?.CancelEditRow(classObj);
    }

    async Task DeleteRow(Class classObj)
    {
        if (grid == null || !grid.IsValid)
        {
            grid?.CancelEditRow(classObj);
        }

        Reset(classObj);

        await ClassService.DeleteClassAsync(classObj.Id);

        await LoadClasses();

        if (grid != null) await grid.Reload();

        StateHasChanged();
    }

    private async Task OnKeyPress(KeyboardEventArgs e, Class classObj)
    {
        if (e.Key == "Enter" && typeOfOperation == "Create")
        {
            await OnCreateRow(classObj);
            await LoadClasses();
            StateHasChanged();
        }
        else if (e.Key == "Enter" && typeOfOperation == "Update")
        {
            await OnUpdateRow(classObj);
            await LoadClasses();
            typeOfOperation = "Create";
            StateHasChanged();
        }
    }

    private void OnInputChange(ChangeEventArgs e, Class classObj)
    {
        if (classObj != null)
        {
            classObj.Name = e.Value?.ToString() ?? string.Empty;
        }
    }

    private void OnInputChangeYear(ChangeEventArgs e, Class classObj)
    {
        if (classObj != null)
        {
            classObj.Year = int.TryParse(e.Value?.ToString(), out var year) ? year : 0;
        }
    }
}