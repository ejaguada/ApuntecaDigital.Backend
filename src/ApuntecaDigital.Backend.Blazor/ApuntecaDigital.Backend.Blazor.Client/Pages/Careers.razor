@page "/careers"
@rendermode InteractiveAuto
@using ApuntecaDigital.Backend.Blazor.Client.Models
@using ApuntecaDigital.Backend.Blazor.Client.Services
@inject CareerService CareerService
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService


<PageTitle>Careers Search</PageTitle>




@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (careers == null || !careers.Any())
{
    <div class="alert alert-info">
        @(string.IsNullOrWhiteSpace(name)
            ? "No careers found. Please try a different search term."
            : $"No careers found matching '{name}'. Please try a different search term.")
</div>
}
else if (careers.Count > 10000)
{
    <RadzenCard class="rz-mb-3">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap">
            <RadzenTextBox @bind-Value="name" Placeholder="Search careers..." Style="width: 100%;" @oninput="OnInputChange"
                @onkeypress="OnKeyPress" />
            <RadzenButton Text="ADD" Click="SearchCareers" />
        </RadzenStack>
    </RadzenCard>

    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap">
            <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                AllowSorting="true" Data="@careers" TItem="Career" ColumnWidth="300px" FilterMode="FilterMode.Advanced"
                AllowPaging="true" PageSize="5">
                <Columns>
                    <RadzenDataGridColumn TItem="Career" Property="Id" Title="ID" Width="70px" />
                    <RadzenDataGridColumn TItem="Career" Property="Name" Title="Career Name" Width="200px" />
                    <RadzenDataGridColumn TItem="Career" Title="Actions" Width="100px">
                        <Template Context="context">
                            <RadzenButton Text="Edit" Click="@(() => OnEditClick(context.Id))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    </RadzenCard>
}
else
{
    <RadzenDataGrid @ref="grid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5"
        Data="@careers" AllowSorting="true" EditMode="@editMode" TItem="Career" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow"
        Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Career" Click="@InsertRow"
                Disabled="@(editMode == DataGridEditMode.Single && careersToInsert.Count() > 0)" />
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="Id" Title="Career ID" Width="120px" Frozen="true" />
            <RadzenDataGridColumn Property="@nameof(Career.Name)" Title="Career Name">
                <EditTemplate Context="career">
                    <RadzenTextBox @bind-Value="career.Name" Style="width:200px; display: block" Name="CareerName"
                        aria-label="Enter career name" />
                    <RadzenRequiredValidator Text="CareerName is required" Component="CareerName" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="career" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
                Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="career">
                    <RadzenButton Icon="add_circle" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Shade="Shade.Lighter" Click="@(() => InsertAfterRow(career))"
                        title="Add new row after this row"
                        Disabled="@(editMode == DataGridEditMode.Single && careersToInsert.Count() > 0)" />
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRow(career))"
                        @onclick:stopPropagation="true" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1"
                        Click="@(args => DeleteRow(career))" @onclick:stopPropagation="true" />
                </Template>
                <EditTemplate Context="career">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Click="@((args) => SaveRow(career))" aria-label="Save" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(career))"
                        aria-label="Cancel" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1"
                        Click="@(args => DeleteRow(career))" aria-label="Delete" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    RadzenDataGrid<Career>? grid = new RadzenDataGrid<Career>();
    private List<Career> careers = new();
    private bool isLoading = false;
    private string name = string.Empty;
    private System.Threading.Timer? debounceTimer;
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<Career> careersToInsert = new List<Career>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCareers();
    }

    private async Task LoadCareers()
    {
        isLoading = true;
        try
        {
            careers = await CareerService.GetCareersAsync(name);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load careers: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchCareers()
    {
        await LoadCareers();
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        name = e.Value?.ToString() ?? string.Empty;

        // Debounce the search to avoid excessive calls
        debounceTimer?.Dispose();
        debounceTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(SearchCareers);
        }, null, 500, Timeout.Infinite);
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCareers();
        }
    }

    private async Task OnEditClick(int id)
    {
        var career = await CareerService.GetCareerByIdAsync(id);
        if (career != null)
        {
            // Open the edit dialog or navigate to the edit page
            await DialogService.OpenAsync<CareerDetails>("Edit Career", new Dictionary<string, object> { { "Career", career } });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Career not found.",
                Duration = 4000
            });
        }
    }

    async Task OnUpdateRow(Career career)
    {
        if (career != null)
        {
            await CareerService.UpdateCareerAsync(career);
        }
    }

    async Task OnCreateRow(Career career)
    {
        if (career != null)
        {
            await CareerService.CreateCareerAsync(career);
            careersToInsert.Remove(career);
            if (grid != null) await grid.Reload();
        }
    }

    void Reset()
    {
        careersToInsert.Clear();
    }

    void Reset(Career career)
    {
        careersToInsert.Remove(career);
    }

    async Task InsertRow()
    {
        if (grid == null || !grid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var career = new Career();
        careersToInsert.Add(career);
        await grid.InsertRow(career);
    }

    async Task InsertAfterRow(Career career)
    {
        if (grid == null || !grid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var newCareer = new Career();
        careersToInsert.Add(newCareer);
        await grid.InsertRow(newCareer);
    }

    async Task EditRow(Career career)
    {
        if (grid == null || !grid.IsValid) return;

        await grid.EditRow(career);
    }

    async Task SaveRow(Career career)
    {
        if (grid == null || !grid.IsValid) return;

        await grid.UpdateRow(career);
    }

    void CancelEdit(Career career)
    {
        Reset(career);

        grid?.CancelEditRow(career);
    }

    async Task DeleteRow(Career career)
    {
        if (grid == null || !grid.IsValid)
        {
            grid?.CancelEditRow(career);
        }

        Reset(career);

        await CareerService.DeleteCareerAsync(career.Id);

        if (grid != null) await grid.Reload();
    }
}