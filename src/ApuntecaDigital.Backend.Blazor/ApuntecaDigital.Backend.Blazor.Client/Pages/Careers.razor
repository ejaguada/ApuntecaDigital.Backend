@page "/careers"
@rendermode InteractiveAuto
@using ApuntecaDigital.Backend.Blazor.Client.Models
@using ApuntecaDigital.Backend.Blazor.Client.Services
@inject CareerService CareerService
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService


<PageTitle>Careers Search</PageTitle>

<RadzenCard class="rz-mb-3">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap">
        <RadzenTextBox @bind-Value="name" Placeholder="Search careers..." Style="width: 100%;" @oninput="OnInputChange"
            @onkeypress="OnKeyPress" />
        <RadzenButton Text="ADD" Click="SearchCareers" />
    </RadzenStack>
</RadzenCard>


@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (careers == null || !careers.Any())
{
    <div class="alert alert-info">
        @(string.IsNullOrWhiteSpace(name)
            ? "No careers found. Please try a different search term."
            : $"No careers found matching '{name}'. Please try a different search term.")
</div>
}
else
{
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap">
            <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                AllowSorting="true" Data="@careers" TItem="Career" ColumnWidth="300px" FilterMode="FilterMode.Advanced"
                AllowPaging="true" PageSize="5">
                <Columns>
                    <RadzenDataGridColumn TItem="Career" Property="Id" Title="ID" Width="70px" />
                    <RadzenDataGridColumn TItem="Career" Property="Name" Title="Career Name" Width="200px" />
                    <RadzenDataGridColumn TItem="Career" Title="Actions" Width="100px">
                        <Template Context="context">
                            <RadzenButton Text="Edit" Click="@(() => OnEditClick(context.Id))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    </RadzenCard>
}

@code {
    RadzenDataGrid<Career>? grid = null;
    private List<Career> careers = new();
    private bool isLoading = false;
    private string name = string.Empty;
    private System.Threading.Timer? debounceTimer;


    protected override async Task OnInitializedAsync()
    {
        await LoadCareers();
    }

    private async Task LoadCareers()
    {
        isLoading = true;
        try
        {
            careers = await CareerService.GetCareersAsync(name);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load careers: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchCareers()
    {
        await LoadCareers();
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        name = e.Value?.ToString() ?? string.Empty;

        // Debounce the search to avoid excessive calls
        debounceTimer?.Dispose();
        debounceTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(SearchCareers);
        }, null, 500, Timeout.Infinite);
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCareers();
        }
    }

    private async Task OnEditClick(int id)
    {
        var career = await CareerService.GetCareerByIdAsync(id);
        if (career != null)
        {
            // Open the edit dialog or navigate to the edit page
            await DialogService.OpenAsync<CareerDetails>("Edit Career", new Dictionary<string, object> { { "Career", career } });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Career not found.",
                Duration = 4000
            });
        }
    }
}